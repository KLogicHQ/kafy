
# üê≥ Kafka Productivity CLI ‚Äî Spec & Design Doc

## üéØ Purpose

Working with Kafka via the native `kafka-*` shell scripts is **painful**:

* Long, inconsistent commands.
* Hard to manage multiple environments (dev, staging, prod).
* No unified way to quickly **inspect topics, consumer lag, or produce/consume test messages**.

üëâ This tool is designed to be the **kubectl for Kafka** ‚Äî a **single CLI** that unifies Kafka operations.

---

## ‚ö° Command Philosophy

Like `kubectl`, our CLI (`kaf`) has three main ideas:

1. **Declarative + Short Commands**

   * `kubectl get pods` ‚Üí `kaf topics list`
   * `kubectl describe pod <name>` ‚Üí `kaf topics describe <topic>`

2. **Context-Aware**

   * `kubectl config use-context staging` ‚Üí `kaf config use staging`
   * Run the same commands in **dev, staging, prod** without rewriting flags.

3. **Unified Output Formats**

   * Human-friendly tables for ops.
   * JSON/YAML output for automation & scripting.

---

## üîÑ Context Switching (like kubectl)

### Config file (`~/.kaf/config.yml`)

```yaml
current-context: dev

clusters:
  dev:
    bootstrap: kafka-dev:9092
    zookeeper: zk-dev:2181

  staging:
    bootstrap: kafka-staging:9092
    zookeeper: zk-staging:2181

  prod:
    bootstrap: kafka-prod:9092
    zookeeper: zk-prod:2181
```

### Commands

* `kaf config list` ‚Üí show all configured clusters.
* `kaf config current` ‚Üí show active cluster.
* `kaf config use staging` ‚Üí switch to staging.
* `kaf config use prod` ‚Üí switch to production.

üí° Just like `kubectl`, once you switch context, **all commands automatically apply to that cluster**.

---

## üìä Kafka CLI vs Native Kafka Scripts

| Action                      | Native Kafka CLI                                                                                              | Our CLI (`kaf`)                                           | Benefit                         |
| --------------------------- | ------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- | ------------------------------- |
| **List topics**             | `kafka-topics.sh --list --bootstrap-server kafka:9092`                                                        | `kaf topics list`                                         | Short, clean                    |
| **Describe topic**          | `kafka-topics.sh --describe --topic orders --bootstrap-server kafka:9092`                                     | `kaf topics describe orders`                              | No boilerplate                  |
| **Create topic**            | `kafka-topics.sh --create --topic orders --partitions 3 --replication-factor 2 --bootstrap-server kafka:9092` | `kaf topics create orders --partitions 3 --replication 2` | Easy to remember                |
| **Consume messages**        | `kafka-console-consumer.sh --topic orders --from-beginning --bootstrap-server kafka:9092`                     | `kaf consume orders --from-beginning`                     | Human-friendly                  |
| **Produce messages**        | `kafka-console-producer.sh --topic orders --bootstrap-server kafka:9092`                                      | `kaf produce orders --file data.json`                     | Supports JSON/YAML input        |
| **List consumer groups**    | `kafka-consumer-groups.sh --list --bootstrap-server kafka:9092`                                               | `kaf groups list`                                         | Simpler                         |
| **Describe consumer group** | `kafka-consumer-groups.sh --describe --group mygroup --bootstrap-server kafka:9092`                           | `kaf groups describe mygroup`                             | Cleaner                         |
| **Switch cluster**          | Must rewrite the entire command with `--bootstrap-server`                                                     | `kaf config use staging`                                  | Context switching, like kubectl |

---

## ‚ö° Command Structure (Inspired by kubectl)

### Topics

* `kaf topics list`
* `kaf topics describe orders`
* `kaf topics create orders --partitions 3 --replication 2`
* `kaf topics delete orders`

### Consumer Groups

* `kaf groups list`
* `kaf groups describe checkout-service`
* `kaf groups lag checkout-service`
* `kaf groups reset checkout-service --to-earliest`

### Produce & Consume

* `kaf produce orders --file data.json`
* `kaf consume orders --from-beginning --limit 20`

### Brokers & Health

* `kaf brokers list`
* `kaf brokers describe 1`
* `kaf health check`

### Offsets

* `kaf offsets show orders`
* `kaf offsets reset orders --to-latest`

### Config

* `kaf config list`
* `kaf config use staging`
* `kaf config current`

---

## üõ† Config Format

Supports multiple clusters, authentication, and TLS.

```yaml
current-context: staging

clusters:
  dev:
    bootstrap: kafka-dev:9092
    security:
      sasl:
        mechanism: PLAIN
        username: dev-user
        password: dev-pass

  staging:
    bootstrap: kafka-staging:9092
    security:
      sasl:
        mechanism: SCRAM-SHA-512
        username: stage-user
        password: stage-pass
      ssl: true

  prod:
    bootstrap: kafka-prod:9092
    security:
      sasl:
        mechanism: SCRAM-SHA-512
        username: prod-user
        password: prod-pass
      ssl: true
```

---

## üåê UI Mode

Run:

```bash
kaf ui --port 8080
```

Features:

* Topic explorer (with partitions/replication).
* Consumer group lag monitoring.
* Produce/consume sandbox (test JSON messages).
* Cluster health dashboard.

---

## üöÄ Roadmap

### v0.1

* Topics, groups, produce, consume
* Config + context switching

### v0.2

* Brokers, offsets, health
* JSON/YAML outputs

### v0.3

* Local web UI

### v0.4+

* AI-powered insights (e.g., ‚ÄúConsumer lag anomaly detected‚Äù)
* Integrations with Slack/MS Teams

---

‚úÖ With this design, the CLI becomes:

* **kubectl for Kafka**
* Faster for developers
* Safer for operators
* Extendable for AI & automation

