name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a GitHub release"
        required: false
        default: "false"
        type: boolean

env:
  GO_VERSION: "1.21"

jobs:
  # Version validation job - runs only on tag pushes
  validate-version:
    name: Validate Tag Version
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate tag matches source version
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          TAG_VERSION="${{ github.ref_name }}"
          TAG_VERSION_CLEAN="${TAG_VERSION#v}"

          # Extract version from root.go
          SOURCE_VERSION=$(grep 'const version = ' cmd/root.go | sed 's/.*"\(.*\)".*/\1/')

          echo "Tag version: $TAG_VERSION_CLEAN"
          echo "Source version: $SOURCE_VERSION"

          if [ "$TAG_VERSION_CLEAN" != "$SOURCE_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Tag version ($TAG_VERSION_CLEAN) does not match source version ($SOURCE_VERSION)"
            echo "Please update the version in cmd/root.go to match the tag"
            exit 1
          else
            echo "✅ Version validation passed"
          fi

  # Linux builds using Docker buildx
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || needs.validate-version.result == 'skipped')
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Linux ${{ matrix.arch }}
        id: build
        run: |
          mkdir -p release/dist
          # Extract version from tag, fail if not a tag build
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            echo "❌ No version tag found. This build requires a git tag."
            exit 1
          fi

          # Build using Docker buildx
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --target final \
            --output type=local,dest=./release/docker-out-${{ matrix.arch }} \
            .

          # Verify binary was created
          if [ ! -f "./release/docker-out-${{ matrix.arch }}/root/kafy" ]; then
            echo "❌ Binary not found in Docker output"
            exit 1
          fi

          # Copy binary to expected location
          cp "./release/docker-out-${{ matrix.arch }}/root/kafy" "release/kafy-linux-${{ matrix.arch }}"

          # Verify binary is executable
          chmod +x "release/kafy-linux-${{ matrix.arch }}"

          # Create package
          PACKAGE_NAME="kafy-$VERSION-linux-${{ matrix.arch }}"
          mkdir -p "release/$PACKAGE_NAME"
          cp "release/kafy-linux-${{ matrix.arch }}" "release/$PACKAGE_NAME/kafy"
          cp README.md "release/$PACKAGE_NAME/" 2>/dev/null || echo "README.md not found"
          cp LICENSE "release/$PACKAGE_NAME/" 2>/dev/null || echo "LICENSE not found"

          # Create tar.gz
          cd release
          tar -czf "dist/$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"
          cd ..

          # Verify package was created
          if [ ! -f "release/dist/$PACKAGE_NAME.tar.gz" ]; then
            echo "❌ Package creation failed"
            exit 1
          fi

          echo "✅ Linux ${{ matrix.arch }} package created successfully"

      - name: Upload Linux ${{ matrix.arch }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kafy-linux-${{ matrix.arch }}
          path: |
            release/kafy-linux-${{ matrix.arch }}
            release/dist/kafy-*-linux-${{ matrix.arch }}.tar.gz
          retention-days: 30

  # macOS builds using native runners
  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || needs.validate-version.result == 'skipped')
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install librdkafka
        run: |
          brew install librdkafka

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build macOS ${{ matrix.arch }}
        run: |
          mkdir -p release/dist
          # Extract version from tag, fail if not a tag build
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            echo "❌ No version tag found. This build requires a git tag."
            exit 1
          fi

          # Build binary
          CGO_ENABLED=1 GOOS=darwin GOARCH=${{ matrix.arch }} go build -o release/kafy-darwin-${{ matrix.arch }} .

          # Sign and fix permissions for macOS
          codesign --force --deep --sign - release/kafy-darwin-${{ matrix.arch }}
          xattr -cr release/kafy-darwin-${{ matrix.arch }}

          # Create package
          PACKAGE_NAME="kafy-$VERSION-darwin-${{ matrix.arch }}"
          mkdir -p "release/$PACKAGE_NAME"
          cp "release/kafy-darwin-${{ matrix.arch }}" "release/$PACKAGE_NAME/kafy"
          cp README.md LICENSE "release/$PACKAGE_NAME/" || true

          # Create tar.gz
          cd release
          tar -czf "dist/$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"
          cd ..

          echo "✅ macOS ${{ matrix.arch }} package created"

      - name: Upload macOS ${{ matrix.arch }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kafy-darwin-${{ matrix.arch }}
          path: |
            release/kafy-darwin-${{ matrix.arch }}
            release/dist/kafy-*-darwin-${{ matrix.arch }}.tar.gz
          retention-days: 30

  # Windows builds using native runners
  build-windows:
    name: Build Windows Binaries
    runs-on: windows-latest
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || needs.validate-version.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install librdkafka (Windows)
        run: |
          # Install vcpkg and librdkafka
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install librdkafka:x64-windows

          # Set environment variables for Go build
          echo "CGO_CPPFLAGS=-I$(pwd)\vcpkg\installed\x64-windows\include" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=-L$(pwd)\vcpkg\installed\x64-windows\lib -lrdkafka" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(pwd)\vcpkg\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
        shell: powershell

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Windows amd64
        run: |
          mkdir -p release/dist
          # Extract version from tag, fail if not a tag build
          if ("${{ github.ref }}" -like "refs/tags/*") {
            $VERSION = "${{ github.ref_name }}"
          } else {
            Write-Host "❌ No version tag found. This build requires a git tag."
            exit 1
          }

          # Build binary
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          go build -o release/kafy-windows-amd64.exe .

          # Create package
          $PACKAGE_NAME = "kafy-$VERSION-windows-amd64"
          mkdir "release/$PACKAGE_NAME"
          cp "release/kafy-windows-amd64.exe" "release/$PACKAGE_NAME/kafy.exe"
          cp README.md "release/$PACKAGE_NAME/" -ErrorAction SilentlyContinue
          cp LICENSE "release/$PACKAGE_NAME/" -ErrorAction SilentlyContinue

          # Create zip
          Compress-Archive -Path "release/$PACKAGE_NAME" -DestinationPath "release/dist/$PACKAGE_NAME.zip"

          Write-Host "✅ Windows amd64 package created"
        shell: powershell

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kafy-windows-amd64
          path: |
            release/kafy-windows-amd64.exe
            release/dist/kafy-*-windows-amd64.zip
          retention-days: 30

  # Create GitHub release (only on tag push or manual trigger)
  release:
    name: Create Release
    needs: [validate-version, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release files
        run: |
          mkdir -p release-files

          # Copy all distribution packages
          find artifacts/ -name "*.tar.gz" -exec cp {} release-files/ \;
          find artifacts/ -name "*.zip" -exec cp {} release-files/ \;

          # Verify we have files to release
          file_count=$(find release-files/ -type f | wc -l)
          if [ $file_count -eq 0 ]; then
            echo "❌ No release files found! Canceling release."
            echo "Available artifacts:"
            find artifacts/ -type f
            exit 1
          fi

          echo "✅ Found $file_count release files:"
          ls -la release-files/

          # Extract version from tag for validation
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            echo "❌ No version tag found. Release requires a git tag."
            exit 1
          fi

          # Verify all expected platforms are present
          expected_files="kafy-$VERSION-linux-amd64.tar.gz kafy-$VERSION-linux-arm64.tar.gz kafy-$VERSION-darwin-amd64.tar.gz kafy-$VERSION-darwin-arm64.tar.gz kafy-$VERSION-windows-amd64.zip"
          missing_files=""

          for file in $expected_files; do
            if [ ! -f "release-files/$file" ]; then
              missing_files="$missing_files $file"
            fi
          done

          if [ ! -z "$missing_files" ]; then
            echo "⚠️  Warning: Missing expected files:$missing_files"
            echo "Proceeding with available files..."
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          body: |
            ## 🚀 kafy - Kafka Productivity CLI ${{ github.ref_name }}

            A comprehensive Kafka productivity CLI tool that simplifies Kafka operations with a kubectl-like design philosophy.

            ### 📦 Downloads

            **Linux:**
            - `kafy-${{ github.ref_name }}-linux-amd64.tar.gz` - Linux x86_64
            - `kafy-${{ github.ref_name }}-linux-arm64.tar.gz` - Linux ARM64

            **macOS:**
            - `kafy-${{ github.ref_name }}-darwin-amd64.tar.gz` - macOS Intel
            - `kafy-${{ github.ref_name }}-darwin-arm64.tar.gz` - macOS Apple Silicon

            **Windows:**
            - `kafy-${{ github.ref_name }}-windows-amd64.zip` - Windows x86_64

            ### 🛠 Installation

            1. Download the appropriate archive for your platform
            2. Extract the archive: `tar -xzf kafy-*.tar.gz` (Linux/Mac) or unzip `kafy-*.zip` (Windows)
            3. Move the `kafy` binary to your PATH
            4. Run `kafy --help` to get started

            ### 🎯 Key Features

            - Context-aware operations across dev, staging, and prod clusters
            - Intelligent tab completion for all commands and resources
            - Real-time configuration fetching using DescribeConfigs API
            - Multiple output formats (table, JSON, YAML)
            - Comprehensive topic, broker, and consumer group management

            See the [README](https://github.com/KLogicHQ/kafy/blob/main/README.md) for complete usage instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Test build process on PRs and manual workflow dispatch (without release)
  test-build:
    name: Test Build Process
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'false')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install librdkafka
        run: |
          sudo apt-get update
          sudo apt-get install -y librdkafka-dev

      - name: Test current platform build
        run: |
          echo "Testing Go build for current platform..."
          go mod tidy
          CGO_ENABLED=1 go build -o kafy-test .

          # Test that binary works
          ./kafy-test --help

          echo "✅ Current platform build successful"

      - name: Test Docker build for Linux
        run: |
          echo "Testing Docker build for Linux amd64..."
          docker buildx build \
            --platform linux/amd64 \
            --target final \
            --output type=local,dest=./test-output \
            .

          # Verify binary was created
          if [ -f "./test-output/root/kafy" ]; then
            echo "✅ Docker build successful"
          else
            echo "❌ Docker build failed - binary not found"
            exit 1
          fi

      - name: Verify build setup
        run: |
          echo "✅ Build environment verified successfully"
